{"ast":null,"code":"function setToken(token) {\n  if (token) {\n    // localStorage is given to us by the browser\n    localStorage.setItem(\"token\", token);\n  } else {\n    localStorage.removeItem(\"token\");\n  }\n}\n\nfunction getToken() {\n  let token = localStorage.getItem(\"token\");\n\n  if (token) {\n    // Check if expired, remove if it is\n    // atob is a function that decodes a base-64 string\n    const payload = JSON.parse(atob(token.split(\".\")[1])); // JWT's exp is expressed in seconds, not milliseconds, so convert\n\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem(\"token\");\n      token = null;\n    }\n  }\n\n  return token;\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\n}\n\nfunction removeToken() {\n  localStorage.removeItem(\"token\");\n}\n\nconst tokenService = {\n  setToken,\n  getToken,\n  removeToken,\n  getUserFromToken\n};\nexport default tokenService;","map":{"version":3,"sources":["C:/Users/Andrew/source/repos/TipTree-2.0/src/utils/tokenService.js"],"names":["setToken","token","localStorage","setItem","removeItem","getToken","getItem","payload","JSON","parse","atob","split","exp","Date","now","getUserFromToken","user","removeToken","tokenService"],"mappings":"AAAA,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIA,KAAJ,EAAW;AACT;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACD,GAHD,MAGO;AACLC,IAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACD;AACF;;AAED,SAASC,QAAT,GAAoB;AAClB,MAAIJ,KAAK,GAAGC,YAAY,CAACI,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAIL,KAAJ,EAAW;AACT;AACA;AACA,UAAMM,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACT,KAAK,CAACU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAhB,CAHS,CAIT;;AACA,QAAIJ,OAAO,CAACK,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnCZ,MAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACAH,MAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AACD,SAAOA,KAAP;AACD;;AAED,SAASc,gBAAT,GAA4B;AAC1B,QAAMd,KAAK,GAAGI,QAAQ,EAAtB;AACA,SAAOJ,KAAK,GAAGO,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACT,KAAK,CAACU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,EAAsCK,IAAzC,GAAgD,IAA5D;AACD;;AAED,SAASC,WAAT,GAAuB;AACrBf,EAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACD;;AAED,MAAMc,YAAY,GAAG;AACnBlB,EAAAA,QADmB;AAEnBK,EAAAA,QAFmB;AAGnBY,EAAAA,WAHmB;AAInBF,EAAAA;AAJmB,CAArB;AAOA,eAAeG,YAAf","sourcesContent":["function setToken(token) {\r\n  if (token) {\r\n    // localStorage is given to us by the browser\r\n    localStorage.setItem(\"token\", token);\r\n  } else {\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n}\r\n\r\nfunction getToken() {\r\n  let token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    // Check if expired, remove if it is\r\n    // atob is a function that decodes a base-64 string\r\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\r\n    // JWT's exp is expressed in seconds, not milliseconds, so convert\r\n    if (payload.exp < Date.now() / 1000) {\r\n      localStorage.removeItem(\"token\");\r\n      token = null;\r\n    }\r\n  }\r\n  return token;\r\n}\r\n\r\nfunction getUserFromToken() {\r\n  const token = getToken();\r\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\r\n}\r\n\r\nfunction removeToken() {\r\n  localStorage.removeItem(\"token\");\r\n}\r\n\r\nconst tokenService = {\r\n  setToken,\r\n  getToken,\r\n  removeToken,\r\n  getUserFromToken,\r\n};\r\n\r\nexport default tokenService;\r\n"]},"metadata":{},"sourceType":"module"}