{"ast":null,"code":"import tokenService from \"./tokenService\";\nconst BASE_URL = \"/api/users/\"; // NOTE THIS IS configured to send of a multi/part form request\n// aka photo\n\nfunction signup(user) {\n  return fetch(BASE_URL + \"signup\", {\n    method: \"POST\",\n    body: user\n  }).then(res => {\n    if (res.ok) return res.json(); // Probably a duplicate email\n\n    throw new Error(\"Email already taken!\");\n  }) // Parameter destructuring!\n  .then(_ref => {\n    let {\n      token\n    } = _ref;\n    return tokenService.setToken(token);\n  }); // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + \"login\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify(creds)\n  }).then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error(\"Bad Credentials!\");\n  }).then(_ref2 => {\n    let {\n      token\n    } = _ref2;\n    return tokenService.setToken(token);\n  });\n}\n\nconst userService = {\n  signup,\n  logout,\n  login,\n  getUser\n};\nexport default userService;","map":{"version":3,"sources":["C:/Users/Andrew/source/repos/TipTree-2.0/src/utils/userService.js"],"names":["tokenService","BASE_URL","signup","user","fetch","method","body","then","res","ok","json","Error","token","setToken","getUser","getUserFromToken","logout","removeToken","login","creds","headers","Headers","JSON","stringify","userService"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,QAAQ,GAAG,aAAjB,C,CAEA;AACA;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,SACEC,KAAK,CAACH,QAAQ,GAAG,QAAZ,EAAsB;AACzBI,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,IAAI,EAAEH;AAFmB,GAAtB,CAAL,CAIGI,IAJH,CAISC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,EAAR,EAAY,OAAOD,GAAG,CAACE,IAAJ,EAAP,CADC,CAEb;;AACA,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD,GARH,EASE;AATF,GAUGJ,IAVH,CAUQ;AAAA,QAAC;AAAEK,MAAAA;AAAF,KAAD;AAAA,WAAeZ,YAAY,CAACa,QAAb,CAAsBD,KAAtB,CAAf;AAAA,GAVR,CADF,CADoB,CAcpB;AACA;AACA;AACA;AACD;;AAED,SAASE,OAAT,GAAmB;AACjB,SAAOd,YAAY,CAACe,gBAAb,EAAP;AACD;;AAED,SAASC,MAAT,GAAkB;AAChBhB,EAAAA,YAAY,CAACiB,WAAb;AACD;;AAED,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOf,KAAK,CAACH,QAAQ,GAAG,OAAZ,EAAqB;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/Be,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,sBAAgB;AAAlB,KAAZ,CAFsB;AAG/Bf,IAAAA,IAAI,EAAEgB,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAHyB,GAArB,CAAL,CAKJZ,IALI,CAKEC,GAAD,IAAS;AACb;AACA,QAAIA,GAAG,CAACC,EAAR,EAAY,OAAOD,GAAG,CAACE,IAAJ,EAAP;AACZ,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD,GATI,EAUJJ,IAVI,CAUC;AAAA,QAAC;AAAEK,MAAAA;AAAF,KAAD;AAAA,WAAeZ,YAAY,CAACa,QAAb,CAAsBD,KAAtB,CAAf;AAAA,GAVD,CAAP;AAWD;;AAED,MAAMY,WAAW,GAAG;AAClBtB,EAAAA,MADkB;AAElBc,EAAAA,MAFkB;AAGlBE,EAAAA,KAHkB;AAIlBJ,EAAAA;AAJkB,CAApB;AAOA,eAAeU,WAAf","sourcesContent":["import tokenService from \"./tokenService\";\r\n\r\nconst BASE_URL = \"/api/users/\";\r\n\r\n// NOTE THIS IS configured to send of a multi/part form request\r\n// aka photo\r\nfunction signup(user) {\r\n  return (\r\n    fetch(BASE_URL + \"signup\", {\r\n      method: \"POST\",\r\n      body: user,\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) return res.json();\r\n        // Probably a duplicate email\r\n        throw new Error(\"Email already taken!\");\r\n      })\r\n      // Parameter destructuring!\r\n      .then(({ token }) => tokenService.setToken(token))\r\n  );\r\n  // Setting our token in localStorage in our browser\r\n  // then we'll be able to use with every request!\r\n  // The above could have been written as\r\n  //.then((token) => token.token);\r\n}\r\n\r\nfunction getUser() {\r\n  return tokenService.getUserFromToken();\r\n}\r\n\r\nfunction logout() {\r\n  tokenService.removeToken();\r\n}\r\n\r\nfunction login(creds) {\r\n  return fetch(BASE_URL + \"login\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify(creds),\r\n  })\r\n    .then((res) => {\r\n      // Valid login if we have a status of 2xx (res.ok)\r\n      if (res.ok) return res.json();\r\n      throw new Error(\"Bad Credentials!\");\r\n    })\r\n    .then(({ token }) => tokenService.setToken(token));\r\n}\r\n\r\nconst userService = {\r\n  signup,\r\n  logout,\r\n  login,\r\n  getUser,\r\n};\r\n\r\nexport default userService;\r\n"]},"metadata":{},"sourceType":"module"}