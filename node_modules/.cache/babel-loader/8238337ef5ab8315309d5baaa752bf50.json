{"ast":null,"code":"import tokenService from './tokenService';\nconst BASE_URL = '/api/users/'; // NOTE THIS IS configured to send of a multi/part form request\n// aka photo \n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(user)\n  }).then(res => {\n    if (res.ok) return res.json(); // Probably a duplicate email\n\n    throw new Error('Email already taken!');\n  }) // Parameter destructuring!\n  .then(_ref => {\n    let {\n      token\n    } = _ref;\n    return tokenService.setToken(token);\n  }); // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(creds)\n  }).then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  }).then(_ref2 => {\n    let {\n      token\n    } = _ref2;\n    return tokenService.setToken(token);\n  });\n}\n\nexport default {\n  signup,\n  logout,\n  login,\n  getUser\n};","map":{"version":3,"sources":["C:/Users/Andrew/source/repos/TipTree-2.0/src/utils/userService.js"],"names":["tokenService","BASE_URL","signup","user","fetch","method","headers","Headers","body","JSON","stringify","then","res","ok","json","Error","token","setToken","getUser","getUserFromToken","logout","removeToken","login","creds"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,QAAQ,GAAG,aAAjB,C,CAGA;AACA;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,SAAOC,KAAK,CAACH,QAAQ,GAAG,QAAZ,EAAsB;AAChCI,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,sBAAgB;AAAlB,KAAZ,CAFuB;AAGhCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAH0B,GAAtB,CAAL,CAKNQ,IALM,CAKDC,GAAG,IAAI;AACX,QAAIA,GAAG,CAACC,EAAR,EAAY,OAAOD,GAAG,CAACE,IAAJ,EAAP,CADD,CAEX;;AACA,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD,GATM,EAUP;AAVO,GAWNJ,IAXM,CAWD;AAAA,QAAC;AAACK,MAAAA;AAAD,KAAD;AAAA,WAAahB,YAAY,CAACiB,QAAb,CAAsBD,KAAtB,CAAb;AAAA,GAXC,CAAP,CADoB,CAapB;AACA;AACA;AACA;AACD;;AAED,SAASE,OAAT,GAAmB;AACjB,SAAOlB,YAAY,CAACmB,gBAAb,EAAP;AACD;;AAED,SAASC,MAAT,GAAkB;AAChBpB,EAAAA,YAAY,CAACqB,WAAb;AACD;;AAED,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOnB,KAAK,CAACH,QAAQ,GAAG,OAAZ,EAAqB;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAC,sBAAgB;AAAjB,KAAZ,CAFsB;AAG/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAea,KAAf;AAHyB,GAArB,CAAL,CAKNZ,IALM,CAKDC,GAAG,IAAI;AACX;AACA,QAAIA,GAAG,CAACC,EAAR,EAAY,OAAOD,GAAG,CAACE,IAAJ,EAAP;AACZ,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD,GATM,EAUNJ,IAVM,CAUD;AAAA,QAAC;AAACK,MAAAA;AAAD,KAAD;AAAA,WAAahB,YAAY,CAACiB,QAAb,CAAsBD,KAAtB,CAAb;AAAA,GAVC,CAAP;AAWD;;AAGD,eAAe;AACbd,EAAAA,MADa;AAEbkB,EAAAA,MAFa;AAGbE,EAAAA,KAHa;AAIbJ,EAAAA;AAJa,CAAf","sourcesContent":["import tokenService from './tokenService';\r\n\r\nconst BASE_URL = '/api/users/';\r\n\r\n\r\n// NOTE THIS IS configured to send of a multi/part form request\r\n// aka photo \r\nfunction signup(user) {\r\n  return fetch(BASE_URL + 'signup', {\r\n    method: 'POST',\r\n    headers: new Headers({ 'Content-Type': 'application/json' }),\r\n    body: JSON.stringify(user)\r\n  })\r\n  .then(res => {\r\n    if (res.ok) return res.json();\r\n    // Probably a duplicate email\r\n    throw new Error('Email already taken!');\r\n  })\r\n  // Parameter destructuring!\r\n  .then(({token}) => tokenService.setToken(token));\r\n  // Setting our token in localStorage in our browser\r\n  // then we'll be able to use with every request!\r\n  // The above could have been written as\r\n  //.then((token) => token.token);\r\n}\r\n\r\nfunction getUser() {\r\n  return tokenService.getUserFromToken();\r\n}\r\n\r\nfunction logout() {\r\n  tokenService.removeToken();\r\n}\r\n\r\nfunction login(creds) {\r\n  return fetch(BASE_URL + 'login', {\r\n    method: 'POST',\r\n    headers: new Headers({'Content-Type': 'application/json'}),\r\n    body: JSON.stringify(creds)\r\n  })\r\n  .then(res => {\r\n    // Valid login if we have a status of 2xx (res.ok)\r\n    if (res.ok) return res.json();\r\n    throw new Error('Bad Credentials!');\r\n  })\r\n  .then(({token}) => tokenService.setToken(token));\r\n}\r\n\r\n\r\nexport default {\r\n  signup, \r\n  logout,\r\n  login,\r\n  getUser\r\n};"]},"metadata":{},"sourceType":"module"}